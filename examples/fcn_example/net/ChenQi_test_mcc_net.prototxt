name: "MCCNetCQ"
layer {
  name: "train_data"
  type: "ImageSegData"
  top: "data"
  top: "label"
  image_data_param {
    root_folder: "examples/fcn_example/data/train_image/"
    source: "examples/fcn_example/data/train_image/train_image.txt"
    label_type: PIXEL
    batch_size: 2
    shuffle: true
    ignore_label:255 
    #new_width: 250
    #new_height: 250
  }
  transform_param {
    mean_value: 13.5
    mean_value: 13.5
    mean_value: 13.5
    crop_size: 112
    mirror: true
  }
  include: { phase: TRAIN }
}

layer {
  name: "test_data"
  type: "ImageSegData"
  top: "data"
  top: "label"
  image_data_param {
    root_folder: "examples/fcn_example/data/test_image/"
    source: "examples/fcn_example/data/test_image/test_image.txt"
    label_type: PIXEL
    batch_size: 2
    shuffle: true
    ignore_label:255
    #new_width: 250
    #new_height: 250
  }
  transform_param {
    mean_value: 13.5
    mean_value: 13.5
    mean_value: 13.5
    crop_size: 112
    mirror: true
  }
  include: { phase: TEST }
}


### NETWORK ###

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name:"conv1_batch"
  type:"BatchNorm"
  batch_norm_param{
    #use_global_stats: true
  }

}

layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "conv1_scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
     
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name:"conv2_batch"
  type:"BatchNorm"
  batch_norm_param{
    #use_global_stats: true
  }

}

layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "conv2_scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
     
    
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name:"conv3_batch"
  type:"BatchNorm"
  batch_norm_param{
    #use_global_stats: true
  }

}

layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "conv3_scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 1
    stride: 1
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name:"conv4_batch"
  type:"BatchNorm"
  batch_norm_param{
    #use_global_stats: true
  }

}

layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "conv4_scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 1
    stride: 1
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
     
  }
}
layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name:"conv5_batch"
  type:"BatchNorm"
  batch_norm_param{
    #use_global_stats: true
  }

}

layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "conv5_scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5_3"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 1
    stride: 1
  }
}

##add layers
############
### 1 * 2048 * 7 * 7
## average pooling
# layer {
#   bottom: "res5c"
#   top: "pool5"
#   name: "pool5"
#   type: "Pooling"
#   pooling_param {
#     kernel_size: 7
#     stride: 1
#     pool: AVE
#   }
# }


##add layers 32
layer {
  name: "score-5c"
  type: "Convolution"
  bottom: "pool5"
  top: "score-5c"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 9
    kernel_size: 1
    engine: CAFFE
  }
}


# layer {
#   name: "upscore-5c"
#   type: "Deconvolution"
#   bottom: "score-5c"
#   top: "upscore-5c"
#   convolution_param {
#     kernel_size: 4
#     stride: 2
#     num_output: 9
#     group: 9
#     pad: 1
#     weight_filler: { type: "bilinear" } 
#     bias_term: false
#   }
#   param { 
#     lr_mult: 0.1 
#     decay_mult: 1 
#   }
# }

layer {
  name: "score-4f"
  type: "Convolution"
  bottom: "pool4"
  top: "score-4f"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 9
    kernel_size: 1
    engine: CAFFE
  }
}

layer {
  name: "fusion-4"
  bottom: "score-4f"
  bottom: "score-5c"
  top: "fusion-4"
  type:"Eltwise"
}

######## 16

layer {
  name: "upscore-fusion-4"
  type: "Convolution"
  bottom: "fusion-4"
  top: "upscore-fusion-4"
  convolution_param {
    kernel_size: 3
    stride: 1
    num_output: 9
    group: 9
    pad: 1
    weight_filler: { type: "bilinear" } 
    bias_term: false
  }
  param { 
    lr_mult: 0.1
    decay_mult: 1
  }
}

layer {
  name: "score-3d"
  type: "Convolution"
  bottom: "pool3"
  top: "score-3d"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 9
    kernel_size: 1
    engine: CAFFE
  }
}

layer {
  name: "fusion-3"
  bottom: "score-3d"
  bottom: "upscore-fusion-4"
  top: "fusion-3"
  type:"Eltwise"
}

######## 8
layer {
  name: "score"
  type: "Deconvolution"
  bottom: "fusion-3"
  top: "score"
  convolution_param {
    kernel_size: 8
    stride: 4
    num_output: 9
    group: 9
    pad: 2
    weight_filler: { type: "bilinear" } 
    bias_term: false
  }
  param { 
    lr_mult: 0.1
    decay_mult: 1 
  }
}

##### end adding




layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "score"
  bottom: "label"
  #top: "seg-loss"
  loss_param {
    #normalize: false
    ignore_label: 255
  }
}


 layer {
   name: "accuracy"
   type: "SegAccuracy"
   bottom: "score"
   bottom: "label"
   top: "accuracy"
   seg_accuracy_param {
     ignore_label: 255
   } 
   include: { phase: TEST }
 }

##### end adding

